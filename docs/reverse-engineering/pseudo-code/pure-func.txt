#                                                                              #
# pure-func.txt                                                                #
#                                                                              #
# A "pure" functional pseudo-code "sketch" of model implementation             #
#                                                                              #
# "Pure" in this context means we're relying on functions providing a          #
# consistent set of parameters & typing rather than utilising parameterisation.# 
# So for example all phenology simulation implementations would have the same  #
# inputs & outputs to their function. Extension / modification of a function   #
# would work around this by the state & output parameters being dictionaries   #
# or an equivalent that would allow the code to stash arbitrary implementation #
# specific items.                                                              #
#                                                                              #
# Currently naming is that the dynamics is referred to as a "simulation" and   #
# the more generic wrapper around it is a "model". This may change.            #
#                                                                              #
# Actual implementation would be broken into appropriate files / modules but   #
# are condensed here for sake of brevity.                                      #
#                                                                              #

#
# example code use -------------------------------------------------------------
#
# loosely based on Fit_Model_To_Hypocotyl_Data.m with default configuration & 
# single photoperiod of 8 hours
#

# initial conditions

floweringGenotype           = 2

weather                     = load("weather.mat")
sunset(weather)             = sunset(weather) * 8 # 8 hour photoperiod

plantParameters             = load("parameter.mat")

# clock 

import F2014_clocks

clock, clockInitialState = 
    clockModel(
        F2014_clocks.dynamicsCOP1,
        F2014_clocks.parameters(genotype)
        entrainDuration=12,
        entrainSunset=first(sunrise(weather)),
        entrainSunrise=first(sunset(weather)),
        entrainClockState=ones(1:35)
        )

# construct phenology model with hypocotyl length calculation

hypocotylParameters = load("Hypocotyl_parameters_P2011")

phenology = phenologyModel(
                simulationPhenology_PIF_CO_FT_HypocotylLength( 
                    clockModelId, floweringGenotype, hypocotylParameters
                        ),
                plantParameters,
                floweringGenotype
                )

# plant model

plant = plantModel(plantParameters, weather, clock, clockInitialState, phenology)

plantOutput = plant(days=90)



#
# functions --------------------------------------------------------------------
#

#
# clock simulation
#

# module: F2014_clocks

func dynamicsCOP1(...) -> ...

    - as per MATLAB: F2014_dynamics_COP1(...)

func parameters(genotype, set=1) -> ...

    - as per MATLAB: load_F2014_parameters(...)

# base clock functionality

func clockModel(
                clockDynamics,
                clockParameters,
                entrainDuration,
                entrainSunrise,
                entrainSunset,
                entrainClockState
               ) -> model, initialClockState, 

    - construct dynamics func of form:

        func dynamics
                (
                    sunrise,
                    sunset,
                    initialState                # aka y0 in MATLAB code
                ) -> clockOutput, clockState    # aka clock_output, clock_state_0

            - captures clockParameters from constructor

            - clockOutput = aka MATLAB: run_clock_model_for_a_day

            - clockState = interp1q(clock_output.T,clock_output.Y,24)

            - return clockOutput, clockState

    - determine entrainedInitialClockState for entrainDuration (using clockDynamics)

    - initialClockOutput, initialClockState = 
        dynamics(entrainSunrise, entrainSunset, entrainedInitialClockState)

    - return dynamics, initialClockState

#
# phenology
#

# PIF_CO_FT

func loadPifCoFtParameters(genotype) -> struct(parameters)
    - load parameters from file into struct
    - NB: adjustment for temperature in MATLAB code moved into simulation
    -     improves performance (not constantly reloading data)

func dynamics_PIF_CO_FT(t, y, P, u, c, lightConditions) -> dydt
    - as per matlab but light conditions passed in

func simulationPhenology_PIF_CO_FT
        ( 
         clockModelId,
         floweringGenotype,
         floweringSet,          # optional defaults to 1
        ) -> simulation
    
    - select clock parameter (clockModelId, floweringGenotype, floweringSet)

    - select clock adapter   (clockModelId)
                             # referred to as dynamics wrapper in MATLAB)
    - select simulation parameters: 
        loadPifCoFtParameters(floweringGenotype)

    - construct simulation func of form:
      NB: the idea is that every phenology simulation will have this form
          extension of function behaviour can be achieved by nesting 
          (see func simulationPhenology_PIF_CO_FT_HypocotylLength below)

        func simulation
                (
                 clockOutput,
                 simulationState,
                 temperature,
                 lightConditions       
                ) -> dailyFTArea, simulationState, output

            - captures clock & simulation parameters from constructor

            - captures clock adapter from constructor

            - tweak simulation parameters for temperature

            - as per MATLAB: simulate_PIF_CO_FT_model without selection logic
              NB: sunrise & sunset are only used to construct lightConditions struct
                  it's cleaner to bump this construction to calling function

            - return dailyFTArea, simulationState, output

    - return simulation

# PIF_CO_FT + Hypocotyl Length parameters

func simulationPhenology_PIF_CO_FT_HypocotylLength
        ( 
         clockModelId,
         floweringGenotype,
         floweringSet,
         hypocotylParameters
        ) -> simulation

    - baseFunc = simulationPhenology_PIF_CO_FT(clockModelId, floweringGenotype, floweringSet)

    - construct extended simulation with hypocotyl functionality:

        func simulation
                (
                 clockOutput,
                 simulationState,
                 temperature,
                 lightConditions       
                ) -> dailyFTArea, simulationState, output

            - dailyFTArea, simulationState, output = 
                baseFunc(clockOuput, simulationState, temperature, lightConditions)
            
            - output.hypocotylLength = 
                calculation using output.T, output.Y + hypocotylParameters
            
            - return dailyFTArea, simulationState, output

    - return simulation

# Phenology model constructor
# - creates a function embodying configured model parameters

func phenologyModel(
                    simulation,
                    parameters,
                    floweringThresholdGenotype,
                   ) -> model

        if no arguments supplied:

            - construct model:

                func model(
                           timepoint,
                           clockOutput
                           temperature,
                           sunrise,
                           sunset,
                           modelState,
                          ) -> dailyThrm, modelState, modelOutput

                - return 0, none, none

            - return model

        else:

            - tweak parameters according to floweringThresholdGenotype

            - constuct model:

                func model(
                           timepoint,
                           clockOutput
                           temperature,
                           sunrise,
                           sunset,
                           modelState,
                          ) -> dailyThrm, modelState, modelOutput

                    - captures simulation from constuctor
                    
                    - captures parameters from constructor
                    
                    - calculate lightConditions
                    
                    - dailyFTArea, simulationState, simulationOutput
                        = simulation(clockOutput, modelState, temperature, lightConditions)
                    
                    - dailyThrm calculation as per MATLAB
                    
                    - modelState = simulationState      
                    # optionally modelState could encapsulate simulationState
                    #  e.g. modelState.simulation = simulationState
                    
                    - modelOutput = simulationOutput
                    # optionally modelOutput could encapsulate simulationOutput
                    #  e.g. modelOutput.simulation = simulationOutput
                    
                    - return dailyThrm, modelState, modelOutput

            - return model

#
# plant model
#

func plantModel(
                plantParameters, 
                weather, 
                clockModel,        
                clockInitialState,
                phenologyModel
               ) -> model

    - construct plant model function:

        func model(days) -> simData:

            # initialise

            # - clock

            - initialise clockState = clockInitialState

            # - phenology

            - initialise FT_module_state = ones(1:18)

            - initialise cumulativePhenThrms = zeroes(1:days)

            - initialise cumulativePhenThrm = 0

            - hasFlowered = false

            # run simulation

            - for day in 1:days :

                - if hasFlowered: break

                # environment

                - timepoint = (day - 1) * 24 + 1

                # clock

                - clockOutput, nextClockState = 
                    clockModel(sunrise, sunset, clockState)

                # phenology

                - dailyThrm, nextFT_module_state, modelOutput = 
                    phenologyModel(
                           timepoint,
                           clockOutput
                           temperatures(weather),
                           at(sunrise(weather), timepoint),
                           at(sunset(weather), timepoint), 
                           FT_module_state,
                          )

                - cumulativePhenThrm = dailyThrm + cumulativePhenThrm

                - cumulativePhenThrms[day] = cumulativePhenThrms

                - FT_module_state = nextFT_module_state

            # simdata

            - construct sim data as per MATLAB

    - return model
